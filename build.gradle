apply plugin: 'com.android.library'
apply plugin: 'com.novoda.bintray-release'

//./gradlew clean build bintrayUpload -PbintrayUser=jackwaiting -PbintrayKey= a34081342aa4b8555c497a6f4db6ce18fdf9af6c -PdryRun=false
publish {

    userOrg = 'jackwaiting'//bintray.com用户名
    groupId = 'com.bluetooth.jackwaiting.lib'//jcenter上的路径
    artifactId = 'bluetoothlibrary'//项目名称
    publishVersion = '1.2.3'//版本号
    desc = 'this is for bluetoothlibrary'//描述，不重要
    website = 'https://github.com/JackWaiting/BluetoothLibrary'//网站，最好有，不重要
    bintrayUser = 'jackwaiting'
    bintrayKey = 'a34081342aa4b8555c497a6f4db6ce18fdf9af6c'
    dryRun = false
}

android {

    compileSdkVersion 27
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
    }

    lintOptions {
        abortOnError false
    }

}

dependencies {
    testImplementation 'junit:junit:4.12'
}

/*def SDK_BASENAME = "bluetoothLibrary";
def SDK_VERSION = "_V1.1.3_20180821";
def sdkDestinationPath = "build";
def zipFile = file('build/intermediates/packaged-classes/release/classes.jar')

task deleteBuild(type: Delete) {
    delete sdkDestinationPath + SDK_BASENAME + SDK_VERSION + ".jar"
}

task makeJar(type: Jar) {
    from zipTree(zipFile)
    from fileTree(dir: 'src/main', includes: ['assets/**'])//将assets目录打入jar包
    baseName = SDK_BASENAME + SDK_VERSION
    destinationDir = file(sdkDestinationPath)
}


makeJar.dependsOn(deleteBuild, build)

// 在项目更目录下执行命令: `./gradlew :alib:clean :alib:uploadArchives` 来发布此jar包 (先执行clean任务, 在执行发布任务)
// 可以在项目根目录下执行命令: `./gradlew clean uploadArchives` 来发布项目下可以发布的所有包(aar/jar等)
apply plugin: 'maven' //应用maven插件
group = 'com.jackwaiting.bluetoothlibrary'    //配置group
version = '1.1.3'           //配置版本
//包类型会根据项目类型自动判断, 如果是android library项目则打包成aar, 如果是java项目则打包成jar包
//./gradlew :bluetoothlibrary:clean :bluetoothlibrary:uploadArchives
uploadArchives {
    repositories {
        mavenDeployer {
            //配置发布的仓库 (不需要授权验证相关的配置). 同时只能配置一个maven仓库, 如果定义了多个, 后面的会覆盖掉前面的
            //repository(url:uri('../repo')) //发布到自定义的本地仓库 (项目跟目录下的repo目录中)
//            repository(url:uri('/Users/stone/demo-repo')) //发布到自定义的本地仓库(绝对路径)
//            repository(url:repositories.mavenLocal().getUrl()) // 发布到本地maven仓库 => "/<user_home>/.m2/repository/"

            //配置远程仓库(发布到远程仓库需要授权验证相关的配置)
//            repository(url:repositories.mavenCentral())
            repository(url: repositories.jcenter())
        }
    }
}*/
